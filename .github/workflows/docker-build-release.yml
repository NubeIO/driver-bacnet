name: build-release

on:
  pull_request:
    types: [ opened, synchronize, reopened, closed ]
    branches:
      - master
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name for the test release (e.g., 1.0.0).'
        required: true

env:
  APP_NAME: bacnet-server-c
  GHCR_IMAGE: ghcr.io/nubeio/bacnet-server-c
  PLATFORMS: linux/amd64,linux/arm/v7

jobs:

  context:
    runs-on: ubuntu-latest

    outputs:
      isRelease: ${{ steps.check_release.outputs.is_release }}
      sha: ${{ github.sha }}
      version: ${{ steps.extract_version.outputs.version }}
      fqn: ${{ env.APP_NAME }}-${{ steps.extract_version.outputs.version }}-${{ steps.short_commit.outputs.short_commit }}

    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.NUBEIO_CI_GITHUBPROJECT_TOKEN }}

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          git-user-signingkey: true
          git-commit-gpgsign: true
          git-tag-gpgsign: true
          git-push-gpgsign: false
          gpg-private-key: ${{ secrets.NUBEIO_CI_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.NUBEIO_CI_GPG_PASSPHARSE }}

      - name: Extract Version
        id: extract_version
        run: |
          VERSION="0.0.0"
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Use the provided version name from workflow dispatch input
            VERSION="${{ github.event.inputs.version_name }}"
          elif [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
            # For pull requests, check if merging into master from a release branch
            HEAD_BRANCH="${{ github.event.pull_request.head.ref }}"
            if [[ "${HEAD_BRANCH}" == "release/"* ]]; then
              VERSION="${HEAD_BRANCH#release/}"
            fi
          fi
          echo "::set-output name=version::${VERSION}"
          echo "Version: ${VERSION}"
          echo "pull_request.head.ref: ${{ github.event.pull_request.head.ref }}"
          echo "github.event.pull_request.merged: ${{ github.event.pull_request.merged }}"

      - name: Check if Release
        id: check_release
        run: |
          IS_RELEASE="false"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            IS_RELEASE="true"
          elif [[ "${{ github.event.pull_request.merged }}" == "true" && "${{ github.event.pull_request.head.ref }}" == "release/"* ]]; then
            IS_RELEASE="true"
          fi
          echo "::set-output name=is_release::${IS_RELEASE}"
          echo "Is Release: ${IS_RELEASE}"

      - name: Get Short Commit ID
        id: short_commit
        run: |
          SHORT_COMMIT=$(git rev-parse --short=7 HEAD)
          echo "::set-output name=short_commit::$SHORT_COMMIT"
          echo "Short Commit ID: $SHORT_COMMIT"

  build:

    runs-on: ubuntu-latest
    needs: context
    services:
      registry:
        image: zero88/gh-registry:latest
        ports:
          - 5000:5000
        options: >-
          -v /home/runner:/var/lib/registry
          --name registry

    steps:
      - uses: actions/checkout@v3

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /home/runner/docker
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Validate cache
        run: |
          docker buildx imagetools inspect localhost:5000/${{ env.APP_NAME }}:buildcache || echo "Not Found"

      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.GHCR_IMAGE }}
          tag-latest: true
          tag-sha: true
          tag-semver: |
            {{version}}
            {{major}}.{{minor}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Build artifact by docker
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/build.Dockerfile
          platforms: ${{ env.PLATFORMS }}
          build-args: |
            APP_VERSION=${{ needs.context.outputs.version }}
            COMMIT_SHA=${{ needs.context.outputs.sha }}
          tags: localhost:5000/${{ env.APP_NAME }}:${{ needs.context.outputs.sha }}
          pull: true
          push: true

      - name: Zip artifacts
        if: ${{ needs.context.outputs.isRelease == 'true' }}
        run: |
          image=localhost:5000/${{ env.APP_NAME }}:${{ needs.context.outputs.sha }}
          output=/opt/bacnet-stack/app/
          mkdir -p /tmp/zip /tmp/images
          IFS=',' read -ra ARR <<< "${{ env.PLATFORMS }}"
          for plat in "${ARR[@]}"; do
            p=$(echo "${plat//\//}")
            p=$(echo "${p//linux/}")
            perImage=$(docker buildx imagetools inspect $image | grep -B 2 $plat | grep Name: | awk '{print $2}')
            artifact=${{ needs.context.outputs.fqn }}.$p
            folder=/tmp/images/$artifact
            docker create --name $artifact $perImage && docker cp $artifact:$output $folder && docker rm $artifact
            cd $folder; mv bacserv app-$p; zip -r /tmp/zip/$artifact.zip ./; cd -
          done

      - name: Login to GitHub Container Registry
        if: ${{ needs.context.outputs.isRelease == 'true' }}
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.NUBEIO_CI_GITHUB_PACKAGES_PAT }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.context.outputs.version }}
          name: Release v${{ needs.context.outputs.version }}
          draft: false
          prerelease: false
          files: |
            /tmp/zip/${{ needs.context.outputs.fqn }}.*.zip

